// 1, Tuple
// 특별하게 타입이 정해져 있지 않음
// 포함될 데이터 갯수를 마음대로 정의하기 나름

//let oneNumbers: (Int, Int) = (1, 2)

let twoNumbers: (Int, Int) = (1, 2)
type(of: twoNumbers) // 변수의 타입을 알 수 있는 함수



let threeNumbers = (1, 2, 5)
//type(of: threeNumbers)



var threeValues = ("홍길동", 20, "서울", 3)
// 멤버(데이터의 종류 및 갯수)는 튜플을 만들때 결정되므로 "추가"/"삭제" 불가
//type(of: threeValues)

threeValues = ("뉴진스", 20, "팜하니", 1) // 처음 결정한 데이터 타입대로만 변경가능

/*:
---
* 연관된 값(튜플)의 각각의 데이터의 접근
---
*/
// 메모리에서 어떤 데이터를 담을 때 0부터 시작한다.
// 왜? 0부터 시작해야 메모리의 가장 많은 공간을 활용할 수 있기 때문
threeValues.0
threeValues.1
threeValues.2
threeValues.3



/*:
---
* Named Tuple(이름이 매겨진 튜플)
---
*/
// 일반적으로 위처럼 사용하면, 혼동할 가능성이 큼

let iOS = (language: "Swift", version: "5") //튜플을 만들 때 구분하기 쉽게 데이터마다 이름을 매길 수 있다.


iOS.0
iOS.1

// 코드의 가독성이 높아짐

iOS.language
iOS.version



/*:
---
* 튜플의 분해(Decomposition)
---
*/
// 튜플의 데이터 묶음을 각 한개씩 분해해 상수나 변수에 저장 가능
// 모아놓았던 데이터를 분해해서 사용하고 싶을 경우

let (first, second, third) = threeNumbers //  5는 첫번째 변수 first에 매칭
// let first = 5
// let second = 6
// let thirs = 7
first
second
third

print(first)
print(second)
print(third)
// 모아놓았던 데이터를 분해해서 각 변수로 사용하고 싶을 경우 (바인딩)




/*:
---
* 튜플의 값의 비교 - 실제 사용하는 경우는 흔하지는 않음
---
*/
// 두개의 튜플 비교 가능 ===> 왼쪽 멤버부터 한번에 하나씩 비교하고, 같을 경우 다음 멤버를 비교함
// 튜플의 비교는 7개 미만의 요소를 가진 것만 가능, 요소가 7개 이상인 튜플의 비교는 직접 구현해야 함(스위프트 표준 라이브러리 기능)


(1, "zebra") < (2, "apple")   // true, 1이 2보다 작고; zebra가 apple은 비교하지 않기 때문
(3, "apple") < (3, "bird")    // true 왼쪽 3이 오른쪽 3과 같고; apple은 bird보다 작기 때문
//문자열에서 비교하는 방법은 알파벳 순서로 크기를 비교한다 a가 b보다 작으니 apple이 더 작음
(4, "dog") == (4, "dog")




("blue", -1) < ("purple", 1)            // 비교가능, 결과: true
//("blue", false) < ("purple", true)    // 에러발생 ===> Bool(참과 거짓값은 크기 비교 불가능)



------------------------------------------------------------------------


/*:
 ## 2) 튜플과 switch문
 * 튜플의 매칭(Mathching)
 ---
 */
// 튜플 == 어떤 묶음의 데이터를 처리할 때 사용하는 것
//let iOS = (language: "Swift", version: "5")

//iOS.0
//iOS.1


// 이런 코드를 아래의 스위치문을 이용하면 단순해짐
//if iOS.0 == "Swift" && iOS.1 == "5" {
//    print("스위프트 버전 5입니다.")
//}


//튜플 만들기
let iOS = (language: "Swift", version: "5")


if iOS.0 == "Swift" && iOS.1 == "7" {
    print("스위프트 버전 5입니다.")
} else {
    print("버전이 맞지 않아요")
}


// 더 간단하게 작성하는 방법
if iOS == ("Swift", "5") {      // 이 값이 모두 TRUE인 경우, 하단 출력하기
    print("스위프트 버전 5입니다.")
}



// 스위프트의 switch문은 튜플 매칭을 지원 ===> 코드를 단순한 형태로 표현 가능

switch iOS {
case ("Swift", "5"):   //case에 Tuple형태를 사용, 값이 모두 매칭되는 경우 출력
    print("스위프트 버전 5입니다.")
case ("Swift", "4"):
    print("스위프트 버전 4입니다.")
default:
    break
}


let iOS1 = (language: "Swift", Version: "3")

switch iOS1 {
case ("Swift", "5"):
    print("스위프트 버전 5입니다.")
case ("Swift", "4"):
    print("스위프트 버전 4입니다.")
case ("Swift", "3"):
    print("스위프트 버전 3입니다.")
default:
    break
}


/*:
 ---
 * 튜플의 활용
 ---
 */
// 튜플의 바인딩
// 바인딩 패턴이란? 어떤 새로운 변수나 상수에 기존값을 매칭시키는 것

var coordinate = (9, 0)   // coordinate == 좌표, 여기선 9가 바인딩 된다

switch coordinate {     // (let distance, 0) = (9, 0) -> 숫자 9가 distance에 바인딩 됨, 0은 그대로 0
case (let distance, 0), (0, let distance):   // 두 케이스 모두 바인딩 가능, x축이나 y축에 있으면 출력하라는 코드
        // 1st 케이스: (let distacne, 0) = (9, 0) or 2nd 케이스: (0, let distance) = (0, 9)
    print("X 또는 Y축 위에 위치하며, \(distance)만큼의 거리가 떨어져 있음")
default:
    print("축 위에 있지 않음") // 변수에 (5, 5)를 넣는 경우, 바인딩케이스와 매칭이 되지 않아 default문을 실행시킴
}





// 튜플의 where절 활용도 가능

coordinate = (1, -1)


switch coordinate {
case (let x, let y) where x == y:      //일단 x, y를 상수로 지정하는 바인딩 한 후에 -> where절 조건을 비교
    print("(\(x), \(y))의 좌표는 y = x 1차함수의 그래프 위에 있다.")
    
case let (x, y) where x == -y:
    print("(\(x), \(y))의 좌표는 y = -x 1차함수의 그래프 위에 있다.")
    
case let (x, y):
    print("(\(x), \(y))의 좌표는 y = x, 또는 y = -x 그래프가 아닌 임의의 지점에 있다.")
}

// case문에서 (let x, let y) 바인딩 패턴이랑, let (x, y) 패턴은 같다! 둘 중 하나 쓰면 됨
// default문을 안쓰는 이유? 어떤 케이스간에 조건이 달려있지 않기 때문에 (x, y) 어떤 좌표든지 사용 가능해서
// Tuple은 Switch문과 결합해서 자유롭게 사용 가능하고 실제로 많이 사용한다


