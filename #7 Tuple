// 1, Tuple
// 특별하게 타입이 정해져 있지 않음
// 포함될 데이터 갯수를 마음대로 정의하기 나름

//let oneNumbers: (Int, Int) = (1, 2)

let twoNumbers: (Int, Int) = (1, 2)
type(of: twoNumbers) // 변수의 타입을 알 수 있는 함수



let threeNumbers = (1, 2, 5)
//type(of: threeNumbers)



var threeValues = ("홍길동", 20, "서울", 3)
// 멤버(데이터의 종류 및 갯수)는 튜플을 만들때 결정되므로 "추가"/"삭제" 불가
//type(of: threeValues)

threeValues = ("뉴진스", 20, "팜하니", 1) // 처음 결정한 데이터 타입대로만 변경가능

/*:
---
* 연관된 값(튜플)의 각각의 데이터의 접근
---
*/
// 메모리에서 어떤 데이터를 담을 때 0부터 시작한다.
// 왜? 0부터 시작해야 메모리의 가장 많은 공간을 활용할 수 있기 때문
threeValues.0
threeValues.1
threeValues.2
threeValues.3



/*:
---
* Named Tuple(이름이 매겨진 튜플)
---
*/
// 일반적으로 위처럼 사용하면, 혼동할 가능성이 큼

let iOS = (language: "Swift", version: "5") //튜플을 만들 때 구분하기 쉽게 데이터마다 이름을 매길 수 있다.


iOS.0
iOS.1

// 코드의 가독성이 높아짐

iOS.language
iOS.version



/*:
---
* 튜플의 분해(Decomposition)
---
*/
// 튜플의 데이터 묶음을 각 한개씩 분해해 상수나 변수에 저장 가능
// 모아놓았던 데이터를 분해해서 사용하고 싶을 경우

let (first, second, third) = threeNumbers //  5는 첫번째 변수 first에 매칭
// let first = 5
// let second = 6
// let thirs = 7
first
second
third

print(first)
print(second)
print(third)
// 모아놓았던 데이터를 분해해서 각 변수로 사용하고 싶을 경우 (바인딩)




/*:
---
* 튜플의 값의 비교 - 실제 사용하는 경우는 흔하지는 않음
---
*/
// 두개의 튜플 비교 가능 ===> 왼쪽 멤버부터 한번에 하나씩 비교하고, 같을 경우 다음 멤버를 비교함
// 튜플의 비교는 7개 미만의 요소를 가진 것만 가능, 요소가 7개 이상인 튜플의 비교는 직접 구현해야 함(스위프트 표준 라이브러리 기능)


(1, "zebra") < (2, "apple")   // true, 1이 2보다 작고; zebra가 apple은 비교하지 않기 때문
(3, "apple") < (3, "bird")    // true 왼쪽 3이 오른쪽 3과 같고; apple은 bird보다 작기 때문
//문자열에서 비교하는 방법은 알파벳 순서로 크기를 비교한다 a가 b보다 작으니 apple이 더 작음
(4, "dog") == (4, "dog")




("blue", -1) < ("purple", 1)            // 비교가능, 결과: true
//("blue", false) < ("purple", true)    // 에러발생 ===> Bool(참과 거짓값은 크기 비교 불가능)


